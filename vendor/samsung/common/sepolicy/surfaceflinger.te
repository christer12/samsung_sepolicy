#
# surfaceflinger
#

############ aosp and sec_common #############
########## type and macro.
# for B2C users
typeattribute surfaceflinger trusteddomain;
#typeattribute surfaceflinger system_domain;
# temporary permissive to gather the log.
# permissive surfaceflinger;

binder_call(surfaceflinger, adbd)
binder_call(surfaceflinger, containerdomain)
binder_call(surfaceflinger, bintvoutservice)
binder_call(surfaceflinger, mediaserver)
binder_call(surfaceflinger, nfc)
binder_call(surfaceflinger, radio)
binder_call(surfaceflinger, servicemanager)
binder_call(surfaceflinger, system)
binder_call(surfaceflinger, zygote)
dumplog_create(surfaceflinger)
mobicore_use(surfaceflinger)

########## self and domain_type
allow surfaceflinger bugreport:dir r_dir_perms;
allow surfaceflinger bugreport:file r_file_perms;
allow surfaceflinger containerdomain:fd use;
allow surfaceflinger { domain -containerdomain -fixmo_app -good_app }:dir r_dir_perms;
allow surfaceflinger { domain -containerdomain -fixmo_app -good_app }:{ file lnk_file } r_file_perms;
allow surfaceflinger dumpstate:dir r_dir_perms;
allow surfaceflinger dumpstate:file r_file_perms;
allow surfaceflinger dumpsys:dir r_dir_perms;
allow surfaceflinger dumpsys:file r_file_perms;
#neverallow by Google:(domain init:binder call;)  allow surfaceflinger init:binder transfer;
allow surfaceflinger init:dir r_dir_perms;
allow surfaceflinger init:file r_file_perms;
allow surfaceflinger mediaserver:dir r_dir_perms;
allow surfaceflinger mediaserver:file r_file_perms;
allow surfaceflinger radio:dir r_dir_perms;
allow surfaceflinger radio:file r_file_perms;
#neverallow by Google: neverallow { domain -debuggerd -vold -dumpstate -system_server } self:capability sys_ptrace
allow surfaceflinger self:capability { dac_read_search sys_resource dac_override };
allow surfaceflinger self:unix_stream_socket write;
allow surfaceflinger shell:dir search;
allow surfaceflinger shell:file r_file_perms;
allow surfaceflinger system_app:file r_file_perms;
allow surfaceflinger vold:dir search;

########## fs_type
allow surfaceflinger debugfs:file r_file_perms;
allow surfaceflinger sysfs_ss_writable:file rw_file_perms;

########## dev_type
allow surfaceflinger camera_device:chr_file rw_file_perms;
allow surfaceflinger hpd_device:chr_file rw_file_perms;
allow surfaceflinger i2c_device:chr_file rw_file_perms;
allow surfaceflinger tty_device:chr_file rw_file_perms;
allow surfaceflinger ump_device:chr_file rw_file_perms;

########## file_type
allow surfaceflinger isolated_app_tmpfs:file write;
allow surfaceflinger media_rw_data_file:file w_file_perms;
allow surfaceflinger shell_exec:file rx_file_perms;
allow surfaceflinger system_data_file:file r_file_perms;
allow surfaceflinger system_file:file x_file_perms;

########## etc_type
allow surfaceflinger debug_prop:property_service set;

########## known issue.
#r_dir_file(surfaceflinger, file_type)
# replacing r_dir_file macro and removing container related access

#neverallow Google CTS-android-m-preview: neverallow { domain -vold -init } vold_data_file:dir *
#allow surfaceflinger { file_type -trstdomain_no_read_file }:dir r_dir_perms;
#changeBySEA allow surfaceflinger { file_type -trstdomain_no_read_file -vold_data_file }:dir r_dir_perms;

#neverallow Google CTS-android-m-preview: neverallow { domain -vold -init } vold_data_file:{ file lnk_file sock_file fifo_file } *
#allow surfaceflinger { file_type -trstdomain_no_read_file }:{ file lnk_file } r_file_perms;
#neverallow { domain -shell -uncrypt -installd } shell_data_file:lnk_file read
#neverallow { domain -appdomain -installd -uncrypt } app_data_file:lnk_file read
#changeBySEA allow surfaceflinger { file_type -trstdomain_no_read_file -vold_data_file -shell_data_file -app_data_file }:{ file lnk_file } r_file_perms;
#changeBySEA allow surfaceflinger { shell_data_file app_data_file }:file r_file_perms;

# Do not allow accessing SDcard files as unsafe ejection could
# cause the kernel to kill the process.
#allow surfaceflinger sdcard_type:file w_file_perms;

# for CTS
allow surfaceflinger app_data_file:file w_file_perms;
allow surfaceflinger platform_app_data_file:file rw_file_perms;
allow surfaceflinger untrusteddomain:dir r_dir_perms;
allow surfaceflinger untrusteddomain:file r_file_perms;

# for ACT 
allow surfaceflinger untrusted_app_tmpfs:file w_file_perms;

# for Bugreport
unix_socket_rw(surfaceflinger, init)
allow surfaceflinger devpts:chr_file { read write };

#from NSA
allow surfaceflinger ctl_default_prop:property_service set;

# reserved memory to support DRM Scenario
allow surfaceflinger sysfs:{ file lnk_file } rw_file_perms;

# support cryptfs_do_dumpstate
allow surfaceflinger cache_file:file write;

############ qcom_common #############
########## type and macro.
binder_call(surfaceflinger, bluetooth)

########## self and domain_type
allow surfaceflinger bootanim:fd use;
allow surfaceflinger domain:dir  { getattr search };
allow surfaceflinger domain:lnk_file read;
allow surfaceflinger mediaserver:fd use;
allow surfaceflinger nfc:fd use;
allow surfaceflinger radio:fd use;
allow surfaceflinger system:fd use;
allow surfaceflinger bluetooth:fd use;
allow surfaceflinger self:tcp_socket create;
allow surfaceflinger system_app:dir r_dir_perms;

########## fs_type
allow surfaceflinger sysfs:file { write setattr };
allow surfaceflinger sysfs_graphics:file write;

########## dev_type
allow surfaceflinger kgsl_device:chr_file { rw_file_perms execute };

########## file_type
allow surfaceflinger shell_data_file:dir r_dir_perms;

########## etc_type
allow surfaceflinger shell_prop:property_service set;

########## known issue.
## from J GED 
allow surfaceflinger sysfs_graphics:file rw_file_perms;

############ slsi_common #############
########## type and macro.
########## self and domain_type
allow surfaceflinger bintvoutservice:file r_file_perms;
allow surfaceflinger mobexdaemon:file r_file_perms;
allow surfaceflinger servicemanager:file r_file_perms;
allow surfaceflinger system_app:fifo_file w_file_perms;

########## fs_type
########## dev_type
allow surfaceflinger hpd_device:chr_file rw_file_perms;
allow surfaceflinger hpd_device:sock_file r_file_perms;
allow surfaceflinger ump_device:chr_file rw_file_perms;
allow surfaceflinger s5p_smem_device:chr_file rw_file_perms;

########## file_type
allow surfaceflinger system_data_file:dir ra_dir_perms;
#neverallow Google CTS-android-m-preview: neverallow { domain -system_server -system_app -init -installd } system_data_file:file { append create link unlink relabelfrom rename setattr write }
#allow surfaceflinger system_data_file:file w_file_perms;
allow surfaceflinger system_data_file:file r_file_perms;

########## androd-m-preview: denials ########
allow surfaceflinger log_device:chr_file rw_file_perms;

########## etc_type
########## known issue.


############ avc_log #############
# avc:  denied  { getattr } for  pid=441 comm="surfaceflinger" path="/sys/kernel/debug/tracing/trace_marker" dev="debugfs" ino=4616 #scontext=u:r:surfaceflinger:s0 tcontext=u:object_r:debugfs:s0 tclass=file
# avc:  denied  { read } for  pid=22103 comm="sh" name="sync" dev="debugfs" ino=9227 scontext=u:r:surfaceflinger:s0 tcontext=u:object_r:debugfs:s0 tclass=file
# avc:  denied  { read } for  pid=9978 comm="lsof" name="fd" dev="proc" ino=286397 scontext=u:r:surfaceflinger:s0 tcontext=u:r:IPSecService:s0 tclass=dir SEPF_SAMSUNG-SM-N910A_4.4.4_0018
# avc:  denied  { open } for  pid=9978 comm="lsof" path="/proc/1076/fd" dev="proc" ino=286397 scontext=u:r:surfaceflinger:s0 tcontext=u:r:IPSecService:s0 tclass=dir SEPF_SAMSUNG-SM-N910A_4.4.4_0018
# avc:  denied  { getattr } for  pid=9978 comm="lsof" path="/proc/1076/maps" dev="proc" ino=286410 scontext=u:r:surfaceflinger:s0 tcontext=u:r:IPSecService:s0 tclass=file SEPF_SAMSUNG-SM-N910A_4.4.4_0018
# avc:  denied  { write } for  pid=2916 comm="surfaceflinger" name="isolated" dev="sysfs" ino=5651 scontext=u:r:surfaceflinger:s0 tcontext=u:object_r:sysfs:s0 tclass=file
#       item=0 name="/sys/devices/ion.17/ion_cma/ion_video/isolated" inode=5651 dev=00:0e mode=0100777 ouid=0 ogid=0 rdev=00:00 obj=u:object_r:sysfs:s0
# avc:  denied  { write } for  pid=305 comm="surfaceflinger" name="vendor_name" dev="sysfs" ino=13117 scontext=u:r:surfaceflinger:s0 tcontext=u:object_r:sysfs_graphics:s0 tclass=file No Property
# item=0 name="/sys/devices/virtual/graphics/fb1/vendor_name" inode=13117 dev=00:0c mode=0100664 ouid=1000 ogid=1003 rdev=00:00 obj=u:object_r:sysfs_graphics:s0
#audit(46769.760:27): avc:  denied  { read write } for  pid=179 comm="surfaceflinger" name="vendor_name" dev="sysfs" ino=10843 scontext=u:r:surfaceflinger:s0 tcontext=u:object_r:sysfs_graphics:s0 tclass=file
#audit(46769.760:27): avc:  denied  { open } for  pid=179 comm="surfaceflinger" name="vendor_name" dev="sysfs" ino=10843 scontext=u:r:surfaceflinger:s0 tcontext=u:object_r:sysfs_graphics:s0 tclass=file
#audit(46769.760:27): arch=40000028 syscall=322 per=800000 success=yes exit=12 a0=ffffff9c a1=becdc5a4 a2=20002 a3=0 items=1 ppid=1 pid=179 auid=4294967295 uid=1000 gid=1003 euid=1000 suid=1000 fsuid=1000 egid=1003 sgid=1003 fsgid=1003 tty=(none) ses=42949audit(46769.760:27):  cwd="/"
#audit(46769.760:27): item=0 name="/sys/devices/virtual/graphics/fb1/vendor_name" inode=10843 dev=00:0c mode=0100664 ouid=1000 ogid=1003 rdev=00:00 obj=u:object_r:sysfs_graphics:s0
# avc:  denied  { write } for  pid=7899 comm="dumpsys" path="/cache/recovery/last_ode_dumpstate_error_unencrypted.log" dev="mmcblk0p24" ino=16002 scontext=u:r:surfaceflinger:s0 tcontext=u:object_r:cache_file:s0 tclass=file SEPF_SAMSUNG-SM-T537A_5.0.2_0009
# avc:  denied  { setattr } for  pid=2864 comm="surfaceflinger" name="target_loads" dev="sysfs" ino=30640 scontext=u:r:surfaceflinger:s0 tcontext=u:object_r:sysfs:s0 tclass=file permissive=1 SEPF_SM-G930W8_6.0_0001


